#ifdef O2SCL_LD_TYPES
  template<size_t N> int function_to_double_nothrow
  (std::string s,
   boost::multiprecision::number<boost::multiprecision::cpp_dec_float<N> >
   &result, int verbose=0) {
    
    typedef boost::multiprecision::number<boost::multiprecision::cpp_dec_float<N>> fp_t;
    
    std::string s2;
 
    // Remove quotes and apostrophes
    for(size_t i=0;i<s.length();i++) {
      if (s[i]!='\"' && s[i]!='\'') {
        s2+=s[i];
      }
    }
    
    calc_utf8<fp_t> calc;
    
    int ret=calc.compile_nothrow(s2.c_str(),0);
    if (ret!=0) return ret;
    
    std::vector<std::u32string> vs=calc.get_var_list();
    
    // If there are undefined variables, then attempt to get them
    // from the constant database
    if (vs.size()!=0) {
      
      find_constants &fc=o2scl_settings.get_find_constants();
      
      std::map<std::string,long double> vars;
      
      std::vector<find_constants::const_entry> matches;
      for(size_t i=0;i<vs.size();i++) {
        std::string vsi2;
        char32_to_utf8(vs[i],vsi2);
        int fret=fc.find_nothrow(vsi2,"mks",matches);
        
        if (fret==find_constants::one_exact_match_unit_match ||
            fret==find_constants::one_pattern_match_unit_match) {
          
          find_constants::const_entry &fcl=matches[0];
          
          vars.insert(std::make_pair(vsi2,fcl.val));
          if (verbose>=2) {
            std::cout << "Found constant " << vsi2
                      << " with value " << fcl.val << std::endl;
          }
          
        } else {
          
          if (verbose>=2) {
            std::cout << "Variable " << vsi2
                      << " not uniquely specified in constant list ("
                      << fret << ")." << std::endl;
          }
          
          return 1;
        }
      }
      
      // No variables, so just evaluate
      int ret2=calc.eval_nothrow(&vars,result);
      if (ret2!=0) return ret2;
      
    } else {
      
      // No variables, so just evaluate
      int ret2=calc.eval_nothrow(0,result);
      if (ret2!=0) return ret2;
    }
    
    return 0;
  }
#endif  
  

/** \page part_section Particles
    
    These classes in the library \o2p calculate the
    thermodynamic properties of interacting and non-interacting
    quantum and \classical particles.

    \hline
    \section part_data_sect Particle data classes

    The class \ref o2scl::part is the basic structure for a particle:
    - part::m - mass
    - part::g - degeneracy factor (e.g. \f$2j+1\f$)
    - part::n - number density
    - part::ed - energy density
    - part::pr - pressure
    - part::en - entropy density
    - part::ms - effective mass, i.e. \f$ m^{*} \f$
    - part::nu - effective chemical potential, i.e. \f$ \nu \f$
    - part::inc_rest_mass - True if the rest mass is included
    - part::non_interacting - False if the particle includes interactions

    The data members part::ms and part::nu allow one to specify
    modifications to the mass and the chemical potential due to
    interactions. This allows one to calculate the properties of
    particle due to interactions so long as the basic form of the
    free-particle dispersion relation is unchanged, i.e.
    \f[
    \sqrt{k^2+m^2} - \mu \rightarrow \sqrt{k^2+m^{* 2}} - \nu 
    \f]
    If the particle is non-interacting, then part::nu and part::ms are
    sometimes used by \o2p functions for temporary storage.

    If part::inc_rest_mass is \c true (as is the default in all of the
    classes except \ref o2scl::nucleus), then all
    functions include the rest mass energy density in the energy
    density, the "mu" functions expect that the rest mass is included
    in part::mu or part::nu as input and the "density" functions
    output part::mu or part::nu including the rest mass.
    
    When part::inc_rest_mass is true, antiparticles are implemented by
    choosing the antiparticle chemical potential to be \f$ - \mu \f$,
    and when inc_rest_mass is false, antiparticles are implemented by
    choosing the chemical potential of the antiparticles to be \f$ -
    \mu - 2 m \f$.

    The thermodynamic identity used to compute the pressure for
    interacting particles is
    \f[
    P = -\varepsilon + s T + \nu n
    \f]
    where part::nu is used. This way, the particle class doesn't need to
    know about the structure of the interactions to ensure that the
    thermodynamic identity is satisfied. Note that in the \o2e
    library, where in the equations of state the normal thermodynamic
    identity is used
    \f[
    P = -\varepsilon + s T + \mu n
    \f]
    Frequently, the interactions which create an effective chemical
    potential which is different than part::mu thus create extra terms in
    the pressure and the energy density for the given equation of
    state.

    The \ref o2scl::fermion class is a child of \ref o2scl::part which
    contains data members for the Fermi momentum and energy gap. The
    \ref o2scl::boson class contains an extra data member for the
    condensate. The \ref o2scl::quark class is a descendant of the
    \ref o2scl::fermion class which contains extra data members for
    the quark condensate and the contribution to the bag constant.
    Nuclei are represented by the \ref o2scl::nucleus class and
    documented in \ref nuclei_section.

    <b>Units:</b>

    Factors of \f$ \hbar, c \f$ and \f$ k_B \f$ have been removed
    everywhere, so that mass, energy, and temperature all have the
    same units. Number and entropy densities have units of mass cubed
    (or energy cubed). The particle classes can be used with any
    system of units which is based on powers of one unit, i.e. 
    \f$ [n] = [T]^3 = [m]^3 = [P]^{3/4} = [\varepsilon]^{3/4}\f$, etc.

    \hline
    \section part_alg_sect Classes for particle thermodynamics

    At zero temperature, the thermodynamic properties of fermions can
    be computed using \ref o2scl::fermion_zerot. The class \ref o2scl::classical
    computes the properties of particles in the classical limit.

    At finite temperature, there are different classes corresponding
    to different approaches to computing the integrals over the
    distribution functions. The approximation scheme from \ref Johns96
    is used in boson_eff and fermion_eff. An exact method employing
    direct integration of the distribution functions is used in
    rel_boson and fermion_rel, but these are necessarily quite a bit
    slower.

    The class \ref o2scl::fermion_eff usually works to within about 1 part in
    \f$ 10^4 \f$, but can be as bad as 1 part in \f$ 10^2 \f$ in some
    more extreme cases. The default settings for \ref o2scl::fermion_rel give
    an accuracy of at least 1 part in \f$ 10^6 \f$ (and frequently
    better than this). For \ref o2scl::fermion_rel, some additional accuracy
    may be obtained by decreasing the integration tolerances.
    \comment
    7/6/09 - These tolerances were determined from bm_part2.cpp using
    the mathematica numbers in internal/partmath.cpp. I'm not sure the
    testing in bm_part.cpp is really that useful. 
    \endcomment

    The class fermion_nonrel assumes a non-relativistic dispersion
    relation for fermions. It includes zero-temperature methods and an
    exact method for finite temperatures. The non-relativistic
    integrands are much simpler and \ref o2scl::fermion_nonrel uses the
    appropriate GSL functions (which are nearly exact) to compute
    them.

    \hline
    \section part_deriv_sect Thermodynamics with derivatives

    Sometimes it is useful to know derivatives like \f$ ds/dT \f$ in
    addition to the energy and pressure. The new data classes are
    children of \ref o2scl::part_deriv . The three classes which
    compute these derivatives for fermions and classical particles.
    The class \ref o2scl::classical_deriv handles the nondegenerate
    limit, \ref o2scl::fermion_deriv_rel handles fermions and \ref
    o2scl::fermion_deriv_nr handles nonrelativistic fermions. These
    classes compute the derivatives
    \f[
    \left(\frac{d n}{d \mu}\right)_{T}, \quad
    \left(\frac{d n}{d T}\right)_{\mu}, \quad \mathrm{and} \quad
    \left(\frac{d s}{d T}\right)_{\mu} \quad .
    \f]
    All other first derivatives of the thermodynamic functions can
    be written in terms of these three. To see how to compute the
    specific heat, for example, see the discussion in the documentation
    of \ref o2scl::part_deriv.

    \hline
    \section ex_part_sect Particle example

    \dontinclude ex_part.cpp
    \skip Example:
    \until End of example
*/
